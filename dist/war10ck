#!/bin/bash


# Subcommand: version
version() {
    echo "$VERSION"
}

# Subcommand: update
update() {
    echo "[*] UPDATE..."
    if [ -f "/usr/local/bin/war10ck" ]; then
        echo "[*] Updating war10ck... requires sudo!"
        $FETCH_CMD "/tmp/war10ck" "$URL_WARLOCK"
        echo "[*] Installing to path"
        sudo mv /tmp/war10ck /usr/local/bin/war10ck
        echo "[*] Setting executable permissions"
        sudo chmod +x /usr/local/bin/war10ck
        echo "[*] Setting executable ownership"
        sudo chown root:root /usr/local/bin/war10ck
    else
        echo "[!] Could not find /usr/local/bin/war10ck. Exiting."
        exit 1
    fi
}

# Subcommand: remove
remove() {
    echo "[*] REMOVE..."
    if [ -f "/usr/local/bin/war10ck" ]; then
        echo "[*] Removing war10ck... requires sudo!"
        sudo rm -f "/usr/local/bin/war10ck"
    else
        echo "[!] Could not find /usr/local/bin/war10ck. Exiting."
        exit 1
    fi
}

# Subcommand: config
config() {
    echo "[*] CONFIG..."
    local subcommand=$1; shift
    # Check if the subcommand is a valid function and call it
    if type "config__$subcommand" >/dev/null 2>&1; then
        "config__$subcommand" "$@"
    else
        echo "[!] Invalid subcommand argument: $subcommand. Exiting."
        echo "[!] Valid arguments: update install aliases functions gitconfig tmux"
        exit 1
    fi
}

config__install() {
    config__functions
    config__aliases
    config__git
    config__tmux
}

config__functions() {
    echo "[*] Configuring functions..."
    $FETCH_CMD "$HOME/.functions" "$URL_FUNCTIONS"
    if ! grep "# CUSTOM FUNCTIONS" ~/.bashrc > /dev/null; then
        {
            echo -e "\n# CUSTOM FUNCTIONS"
            echo -e "if [ -f ~/.functions ]; then"
            echo -e "    . ~/.functions"
            echo -e "fi"
        }  >> ~/.bashrc
    fi
}

config__aliases() {
    echo "[*] Configuring aliases..."
    $FETCH_CMD "$HOME/.aliases" "$URL_ALIASES"
    if ! grep "# CUSTOM ALIASES" ~/.bashrc > /dev/null; then
        {
            echo -e "\n# CUSTOM ALIASES"
            echo -e "if [ -f ~/.aliases ]; then"
            echo -e "    . ~/.aliases"
            echo -e "fi"
        }  >> ~/.bashrc
    fi
}

config__git() {
    echo "[*] Configuring git..."
    $FETCH_CMD "$HOME/.gitconfig" "$URL_GITCONFIG"
}

config__tmux() {
    echo "[*] Configuring tmux..."
    $FETCH_CMD "$HOME/.tmux.conf" "$URL_TMUX_CONF"
    $FETCH_CMD "$HOME/.tmux/cer" "$URL_TMUX_CER"
    $FETCH_CMD "$HOME/.tmux/homelab" "$URL_TMUX_HOMELAB"
}

# Subcommand: install
install() {
    echo "[*] INSTALL..."
}

# HELPERS

# Define backwards_cp which switches source and destination
_bcp() {
    cp "$2" "$1"
}

# Function to check if an element is in an array
_is_valid_subcommand() {
    local subcommand=$1
    for valid_subcommand in "${valid_subcommands[@]}"; do
        if [[ "$valid_subcommand" == "$subcommand" ]]; then
            return 0
        fi
    done
    return 1
}

# ENTRYPOINT

# Check last argument is not the script itself
# If it is, then we are being sourced, so just load functions and return
[[ $_ != "$0" ]] && return

VERSION=""

BASE_URL="https://war10ck.thomaslaurenson.com"

# Toggle to use local files for testing
IS_LOCAL=false
if [ "$IS_LOCAL" = true ]; then
    cd "$(dirname "$0")" || exit 1
    BASE_URL="../dist"
fi

URL_WARLOCK="$BASE_URL/war10ck"
URL_ALIASES="$BASE_URL/config/aliases"
URL_FUNCTIONS="$BASE_URL/config/functions"
URL_GITCONFIG="$BASE_URL/config/gitconfig"
URL_TMUX_CONF="$BASE_URL/config/tmux/tmux.conf"
URL_TMUX_CER="$BASE_URL/config/tmux/cer"
URL_TMUX_HOMELAB="$BASE_URL/config/tmux/homelab"

# Determine fetch command to use
if [ "$IS_LOCAL" = true ]; then
    FETCH_CMD="_bcp"
elif command -v curl &> /dev/null; then
    FETCH_CMD="curl -s -o"
elif command -v wget &> /dev/null; then
    FETCH_CMD="wget -q -O"
else
    echo "[!] No fetch command found... Exiting"
    exit 1
fi

valid_subcommands=("update" "remove" "config" "install" "version")

# Check a valid subcommand was passed
subcommand=$1
if ! _is_valid_subcommand "$subcommand"; then
    echo "[!] Invalid subcommand: $subcommand"
    echo "[!] Valid subcommands: ${valid_subcommands[*]}"
    echo "[!] Exiting."
    exit 1
fi

# Double check a valid function name matches the subcommand
# declare -f will return 0 if the function is found (above)
# $1 is checked because this is the "subcommand" we want to run
if declare -f "$subcommand" >/dev/null 2>&1; then
    # Invoke function with all ($@) arguments
    "$@"
else
    echo "[!] Invalid subcommand: $subcommand"
    echo "[!] No matching function."
    echo "[!] Exiting."
    exit 1
fi
