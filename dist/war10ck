#!/bin/bash


# Subcommand: version
version() {
    echo "$VERSION"
}

# Subcommand: update
update() {
    echo "[*] UPDATE..."
    if [ -f "/usr/local/bin/war10ck" ]; then
        echo "[*] Updating war10ck... requires sudo!"
        $FETCH_CMD "/tmp/war10ck" "$URL_WARLOCK"
        echo "[*] Installing to path"
        sudo mv /tmp/war10ck /usr/local/bin/war10ck
        echo "[*] Setting executable permissions"
        sudo chmod +x /usr/local/bin/war10ck
        echo "[*] Setting executable ownership"
        sudo chown root:root /usr/local/bin/war10ck
    else
        echo "[!] Could not find /usr/local/bin/war10ck. Exiting."
        exit 1
    fi
}

# Subcommand: remove
remove() {
    echo "[*] REMOVE..."
    if [ -f "/usr/local/bin/war10ck" ]; then
        echo "[*] Removing war10ck... requires sudo!"
        sudo rm -f "/usr/local/bin/war10ck"
    else
        echo "[!] Could not find /usr/local/bin/war10ck. Exiting."
        exit 1
    fi
}

# Subcommand: config
config() {
    echo "[*] CONFIG..."
    local subcommand=$1; shift
    # Check if the subcommand is a valid function and call it
    if type "config__$subcommand" >/dev/null 2>&1; then
        "config__$subcommand" "$@"
    else
        echo "[!] Invalid subcommand argument: $subcommand. Exiting."
        echo "[!] Valid arguments: rundmc aliases functions gitconfig tmux packages"
        exit 1
    fi
}

config() {
    config__rundmc
    config__aliases
    config__functions
    config__git
    config__tmux
    config__packages
}

config__rundmc() {
    echo "[*] Configuring rundmc..."
    $FETCH_CMD "$HOME/.rundmc" "$URL_CONFIG_RUNDMC"

    if ! grep "# RUNDMC" ~/.bashrc > /dev/null; then
        {
            echo -e "\n# RUNDMC"
            echo -e "if [ -f ~/.rundmc ]; then"
            echo -e "    . ~/.rundmc"
            echo -e "fi"
        }  >> ~/.bashrc
    fi
}

config__aliases() {
    echo "[*] Configuring aliases..."
    $FETCH_CMD "$HOME/.aliases" "$URL_CONFIG_ALIASES"
}

config__functions() {
    echo "[*] Configuring functions..."
    $FETCH_CMD "$HOME/.functions" "$URL_CONFIG_FUNCTIONS"
}

config__git() {
    echo "[*] Configuring git..."
    $FETCH_CMD "$HOME/.gitconfig" "$URL_CONFIG_GITCONFIG"
}

config__tmux() {
    echo "[*] Configuring tmux..."
    $FETCH_CMD "$HOME/.tmux.conf" "$URL_CONFIG_TMUX_CONF"
    $FETCH_CMD "$HOME/.tmux/cer" "$URL_CONFIG_TMUX_CER"
    $FETCH_CMD "$HOME/.tmux/home" "$URL_CONFIG_TMUX_HOME"
}

config__packages() {
    echo "[*] Configuring packages..."
    package_list=(
        vim
        wget
        curl
        tree
        gh
        jq
    )
    sudo apt -y install "${package_list[@]}"
}

# Subcommand: install
install() {
    echo "[*] INSTALL..."
    local subcommand=$1; shift
    # Check if the subcommand is a valid function and call it
    if type "install__$subcommand" >/dev/null 2>&1; then
        "install__$subcommand" "$@"
    else
        echo "[!] Invalid subcommand argument: $subcommand. Exiting."
        echo "[!] Valid arguments: docker golang hugo mitmproxy terraform vscode"
        exit 1
    fi
}

install__docker() {
    echo "[*] Installing Docker..."
    if [ -f "/usr/bin/docker" ]; then
        echo "[!] Docker already installed. Skipping installation."
    else
        $FETCH_CMD "/tmp/docker.sh" "$URL_INSTALL_DOCKER"
        sudo bash /tmp/docker.sh
        echo "[*] Docker installation complete."
        echo "[*] Please log out and back in to apply group changes."
        rm -f /tmp/docker.sh
    fi
}

install__golang() {
    echo "[*] Installing Go..."
    if [ -f "/usr/local/bin/go" ]; then
        echo "[!] Go already installed. Skipping installation."
    else
        $FETCH_CMD "/tmp/golang.sh" "$URL_INSTALL_GOLANG"
        sudo bash /tmp/golang.sh
        echo "[*] Go installation complete."
        rm -f /tmp/golang.sh
    fi
}

install__hugo() {
    echo "[*] Installing Hugo..."
    if command -v hugo &> /dev/null; then
        echo "[!] Hugo already installed. Skipping installation."
    else
        $FETCH_CMD "/tmp/hugo.sh" "$URL_INSTALL_HUGO"
        sudo bash /tmp/hugo.sh
        echo "[*] Hugo installation complete."
        rm -f /tmp/hugo.sh
    fi
}

install__mitmproxy() {
    echo "[*] Installing mitmproxy..."
    if command -v mitmproxy &> /dev/null; then
        echo "[!] mitmproxy already installed. Skipping installation."
    else
        $FETCH_CMD "/tmp/mitmproxy.sh" "$URL_INSTALL_MITMPROXY"
        sudo bash /tmp/mitmproxy.sh
        echo "[*] mitmproxy installation complete."
        rm -f /tmp/mitmproxy.sh
    fi
}

install__terraform() {
    echo "[*] Installing Terraform..."
    if command -v terraform &> /dev/null; then
        echo "[!] Terraform already installed. Skipping installation."
    else
        $FETCH_CMD "/tmp/terraform.sh" "$URL_INSTALL_TERRAFORM"
        sudo bash /tmp/terraform.sh
        echo "[*] Terraform installation complete."
        rm -f /tmp/terraform.sh
    fi
}

install__vscode() {
    echo "[*] Installing Visual Studio Code..."
    if command -v code &> /dev/null; then
        echo "[!] Visual Studio Code already installed. Skipping installation."
    else
        $FETCH_CMD "/tmp/vscode.sh" "$URL_INSTALL_VSCODE"
        sudo bash /tmp/vscode.sh
        echo "[*] Visual Studio Code installation complete."
        rm -f /tmp/vscode.sh
    fi
}

# HELPERS

# Define backwards_cp which switches source and destination
_bcp() {
    cp "$2" "$1"
}

# Function to check if an element is in an array
_is_valid_subcommand() {
    local subcommand=$1
    for valid_subcommand in "${valid_subcommands[@]}"; do
        if [[ "$valid_subcommand" == "$subcommand" ]]; then
            return 0
        fi
    done
    return 1
}

# ENTRYPOINT

# Check last argument is not the script itself
# If it is, then we are being sourced, so just load functions and return
[[ $_ != "$0" ]] && return

VERSION=""

BASE_URL="https://war10ck.thomaslaurenson.com"

# Toggle to use local files for testing
IS_LOCAL=false
if [ "$IS_LOCAL" = true ]; then
    cd "$(dirname "$0")" || exit 1
    BASE_URL="../dist"
fi

URL_WARLOCK="$BASE_URL/war10ck"
URL_CONFIG_RUNDMC="$BASE_URL/config/rundmc"
URL_CONFIG_FUNCTIONS="$BASE_URL/config/functions"
URL_CONFIG_ALIASES="$BASE_URL/config/aliases"
URL_CONFIG_GITCONFIG="$BASE_URL/config/gitconfig"
URL_CONFIG_TMUX_CONF="$BASE_URL/config/tmux/tmux.conf"
URL_CONFIG_TMUX_CER="$BASE_URL/config/tmux/cer"
URL_CONFIG_TMUX_HOME="$BASE_URL/config/tmux/home"
URL_INSTALL_DOCKER="$BASE_URL/install/docker.sh"
URL_INSTALL_GOLANG="$BASE_URL/install/golang.sh"
URL_INSTALL_HUGO="$BASE_URL/install/hugo.sh"
URL_INSTALL_MITMPROXY="$BASE_URL/install/mitmproxy.sh"
URL_INSTALL_TERRAFORM="$BASE_URL/install/terraform.sh"
URL_INSTALL_VSCODE="$BASE_URL/install/vscode.sh"

# Determine fetch command to use
if [ "$IS_LOCAL" = true ]; then
    FETCH_CMD="_bcp"
elif command -v curl &> /dev/null; then
    FETCH_CMD="curl -s -o"
elif command -v wget &> /dev/null; then
    FETCH_CMD="wget -q -O"
else
    echo "[!] No fetch command found... Exiting"
    exit 1
fi

valid_subcommands=("version" "update" "remove" "config" "install")

# Check a valid subcommand was passed
subcommand=$1
if ! _is_valid_subcommand "$subcommand"; then
    echo "[!] Invalid subcommand: $subcommand"
    echo "[!] Valid subcommands: ${valid_subcommands[*]}"
    echo "[!] Exiting."
    exit 1
fi

# Double check a valid function name matches the subcommand
# declare -f will return 0 if the function is found (above)
# $1 is checked because this is the "subcommand" we want to run
if declare -f "$subcommand" >/dev/null 2>&1; then
    # Invoke function with all ($@) arguments
    "$@"
else
    echo "[!] Invalid subcommand: $subcommand"
    echo "[!] No matching function."
    echo "[!] Exiting."
    exit 1
fi
